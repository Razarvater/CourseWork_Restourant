<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WindowControllers"
                    x:Class="WindowControllers.Themes.Generic"
                    xmlns:lc="clr-namespace:WindowControllers.Themes">

    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuBack}">#FF2E3246</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuBackFocused}">#FF454545</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuBackNotFocused}">#FF2E323A</SolidColorBrush>

    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=ButtonFocused}">#FF2E324F</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=ButtonNotFocused}">#FF2E3246</SolidColorBrush>

    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=ScrollBarColor}">#FF565656</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=GroupBoxBackColor}">#FF2E323A</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=GroupBoxBackColor_2}">#FF2b2f37</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=GroupBoxBorderColor}">#FF2E3235</SolidColorBrush>

    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=FocusedTextBoxBackground}">#FF3C404A</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=NotFocusedTextBoxBackground}">#FF32363C</SolidColorBrush>

    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MainFontColor}">#FFCCCCCC</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=FontColorNotFocused}">#FFABABAB</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=FontColorFocused}">#FFACACAC</SolidColorBrush>

    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuFontColorNotFocused}">#FFABABAB</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuFontColorFocused}">#FF447BD4</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuFontColorPressed}">#FF284A7E</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuFontColorActive}">#FF66A3D2</SolidColorBrush>

    <!--Конвертеры-->
    <local:ButtonVisConverter x:Key="ButtonVisConverter"/>
    <local:MenuVisConverter x:Key="MenuVisConverter"/>
    <local:MenuModeConverter x:Key="MenuModeConverter"/>
    <local:MenuColorConverter x:Key="MenuColorConverter"/>
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

    <!--Тёмный ListBox-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=ListBlack}" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!--Верхняя кнопка ScroolBar-->
    <Style x:Key="ScrollBarLineButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=ScrollBarColor}}" Points="2,15 16,15 9,2"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Нижняя кнопка ScroolBar-->
    <Style x:Key="ScrollBarLineButtonBottomStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=ScrollBarColor}}" Points="2,3 16,3 9,16"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Прокрутка ScrollBar-->
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border BorderBrush="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=ScrollBarColor}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Прокрутка ScroolBar-->
    <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle Fill="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=ScrollBarColor}}" Margin="2,0,1,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Стиль вертикального ScroolBar-->
    <Style x:Key="ScroolBarBlackVertical" TargetType="{x:Type ScrollBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition MaxHeight="18"/>
                        </Grid.RowDefinitions>

                        <RepeatButton Grid.Row="0" Height="18" Style="{StaticResource ScrollBarLineButtonStyle}" Command="ScrollBar.LineUpCommand" />
                        <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbStyle}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                            </Track.IncreaseRepeatButton>
                        </Track>
                        <RepeatButton Grid.Row="3" Height="18" Style="{StaticResource ScrollBarLineButtonBottomStyle}"
                                      Command="ScrollBar.LineDownCommand"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Верхняя кнопка ScroolBar-->
    <Style x:Key="ScrollBarLineButtonStyleHor" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=ScrollBarColor}}" Points="2,8 16,16 16,2"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Нижняя кнопка ScroolBar-->
    <Style x:Key="ScrollBarLineButtonBottomStyleHor" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=ScrollBarColor}}" Points="2,16 2,2 16,9"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Прокрутка ScroolBar-->
    <Style x:Key="ScrollBarThumbStyleHor" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle Fill="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=ScrollBarColor}}" Margin="0,2,0,1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Стиль горизонтального ScrollBar-->
    <Style x:Key="ScroolBarBlackHorizontal" TargetType="{x:Type ScrollBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MaxWidth="18"/>
                            <ColumnDefinition Width="0.0001*"/>
                            <ColumnDefinition MaxWidth="18"/>
                        </Grid.ColumnDefinitions>

                        <RepeatButton Grid.Column="0" Width="18" Style="{StaticResource ScrollBarLineButtonStyleHor}"
                                      Command="ScrollBar.LineLeftCommand"/>
                        <Track Name="PART_Track" Grid.Column="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbStyleHor}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                            </Track.IncreaseRepeatButton>
                        </Track>
                        <RepeatButton Grid.Column="2" Width="18" Style="{StaticResource ScrollBarLineButtonBottomStyleHor}"
                                      Command="ScrollBar.LineRightCommand"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Шаблон для ScrollWiewer-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=ScrollViewerBlack}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" BorderThickness="0">
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        </Border>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Style="{StaticResource ScroolBarBlackVertical}" Grid.Column="1" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}"
                            ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Style="{StaticResource ScroolBarBlackHorizontal}" Orientation="Horizontal" Grid.Row="1" Grid.ColumnSpan="1" Value="{TemplateBinding HorizontalOffset}"
                            Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Тёмный Combobox-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=ComboBoxBlack}" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=NotFocusedTextBoxBackground}}"/>
        <Setter Property="Foreground" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=MainFontColor}}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        
                        <Grid Height="{TemplateBinding Height}" MinHeight="{TemplateBinding MinHeight}" Margin="{TemplateBinding Padding}">
                            <ToggleButton x:Name="ToggleButton" Background="{TemplateBinding Background}" Content="{TemplateBinding SelectionBoxItem}" BorderThickness="0"
                                Foreground="{TemplateBinding Foreground}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Popup x:Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                Placement="Bottom" PopupAnimation="Slide">
                                <Grid>
                                    <Border x:Name="PopupBorder" Background="{TemplateBinding Background}">
                                        <ScrollViewer x:Name="ScrollViewer" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                            <StackPanel x:Name="ItemsPresenter" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Тёмный textBlock-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=TextBlockBlack}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=MainFontColor}}"/>
        <Setter Property="FontSize" Value="12"/>
    </Style>
    
    <!--Тёмный TextBox-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=TextBoxBlack}" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Background" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=NotFocusedTextBoxBackground}}"/>
        <Setter Property="Foreground" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=MainFontColor}}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="border" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="8" Color="Black" Opacity="0.35" ShadowDepth="1"/>
                            </Border.Effect>
                        </Border>
                        <ScrollViewer x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=FocusedTextBoxBackground}}"/>
                            <Setter TargetName="border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect BlurRadius="13" Color="Black" Opacity="0.35" ShadowDepth="1"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--Триггер - При наличии ошибки будет появляться tooltip с текстом ошибки(определённым во ViewModel)-->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="BorderBrush" Value="#55FF0000"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Duration="0:0:1" 
                                From="#55AA0000" To="#FFFF0000" AutoReverse="True" RepeatBehavior="Forever"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Тёмный CheckBox-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=CheckBoxBlack}" TargetType="{x:Type CheckBox}">
        <Setter Property="Width" Value="15"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="Background" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=NotFocusedTextBoxBackground}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="Border" BorderThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                        <Canvas x:Name="Value" Width="15" Height="15" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Line x:Name="No1" X1="4" X2="11" Y1="4" Y2="11" Stroke="#FF0000" StrokeThickness="1.5"/>
                            <Line x:Name="No2" X1="11" X2="4" Y1="4" Y2="11" Stroke="#FF0000" StrokeThickness="1.5"/>

                            <Line x:Name="Yes1" X1="4" X2="7" Y1="7" Y2="11" Stroke="#00FF00" StrokeThickness="1.5"/>
                            <Line x:Name="Yes2" X1="7" X2="11" Y1="11" Y2="4" Stroke="#00FF00" StrokeThickness="1.5"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="Yes1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Yes2" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="No1" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="No2" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="No1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="No2" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Yes1" Property="Visibility" Value="Hidden"/>
                            <Setter TargetName="Yes2" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#d9d9d9"/>
                            <Setter TargetName="Border" Property="BorderThickness" Value="1.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Тёмная Button-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=BlackButton}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Back" Background="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=ButtonNotFocused}}" CornerRadius="5" BorderThickness="0.1">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="10" Color="Black" Opacity="0.35" ShadowDepth="1"/>
                            </Border.Effect>
                        </Border>
                        <Label x:Name="txt" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="11" SnapsToDevicePixels="True"
                               Foreground="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=FontColorNotFocused}}" Content="{TemplateBinding Content}"/>
                        <!--Label заглушка, для того, чтобы лог раземры кнопки были постоянны-->
                        <Label x:Name="txt_2" VerticalAlignment="Center" Visibility="Hidden" HorizontalAlignment="Center" FontSize="11" SnapsToDevicePixels="True"
                               Foreground="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=FontColorNotFocused}}" Content="{TemplateBinding Content}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=ButtonFocused}}"/>
                            <Setter TargetName="txt" Property="Foreground" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=FontColorFocused}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="Back" Property="Background" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=ButtonNotFocused}}"/>
                            <Setter TargetName="txt" Property="Foreground" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=FontColorNotFocused}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=ButtonFocused}}"/>
                            <Setter TargetName="Back" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect BlurRadius="8" Color="Black" Opacity="0.35" ShadowDepth="1"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Back" Property="Margin" Value="1"/>
                            <Setter TargetName="txt" Property="FontSize" Value="10.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Тёмный GroupBox-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=GroupBoxBlack}" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=GroupBoxBackColor}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=GroupBoxBorderColor}}"/>
        <Setter Property="Foreground" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=MainFontColor}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="1*"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"
                                CornerRadius="4" Grid.RowSpan="2">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="10" Color="Black" Opacity="0.35" ShadowDepth="0"/>
                            </Border.Effect>
                        </Border>
                        <Border x:Name="Header" Padding="2,1,2,0" HorizontalAlignment="Center">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                         </Border>
                        <Grid Grid.Row="1">
                            <ContentPresenter Margin="{TemplateBinding Padding}"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Кнопки справа сверху(Менеджмент окна)-->
    <Style x:Key="ManageButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="10,5,10,5"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Back" Padding="5" Background="Transparent" CornerRadius="0" BorderThickness="0">
                            <ContentPresenter x:Name="txt" VerticalAlignment="Center" 
                                HorizontalAlignment="Center" Content="{TemplateBinding Content}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="Back" Property="Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(Button.Width)" To="40" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(Button.Width)" To="35" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Стиль для элементов меню-->
    <Style x:Key="PageItems" TargetType="MenuItem">
        <Setter Property="Header" Value="{Binding Name}"/>
        <Setter Property="Command" Value="{Binding Navigate}"/>
        <Setter Property="CommandParameter" Value="{Binding PageContent}"/>
        <Setter Property="Icon" Value="{Binding IconSource}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Background="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MenuBackNotFocused}}" 
                            BorderThickness="0" BorderBrush="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MenuBackFocused}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MaxWidth="30"/>
                                <ColumnDefinition Width="100"/>
                                <ColumnDefinition Width="5"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="5"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="5"/>
                            </Grid.RowDefinitions>
                            <Image Grid.Row="1" Source="{Binding IconSource}" MaxWidth="30"/>
                            <ContentPresenter Grid.Column="1" Grid.Row="1" Margin="6,3,6,5" VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True">
                                <ContentPresenter.Effect>
                                    <DropShadowEffect Opacity="0.25" RenderingBias="Performance" Direction="320"/>
                                </ContentPresenter.Effect>
                            </ContentPresenter>
                            <Canvas Grid.Column="2" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Right" Width="4" Height="10"
                                    Visibility="{Binding IsSelected, Converter={StaticResource MenuVisConverter}}">
                                <Polygon Points="0,5 4,0 4,10" Fill="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MenuFontColorActive}}"/>
                            </Canvas>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding Source={StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=MenuFontColorFocused}}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Foreground" Value="{Binding Source={StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=MenuFontColorNotFocused}}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{Binding Source={StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=MenuFontColorPressed}}}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                            <Setter Property="Foreground" Value="{Binding Source={StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic, ResourceId=MenuFontColorActive}}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MainFontColor}}"/>
    </Style>

    <!--Общий стиль меню-->
    <Style x:Key="MainMenu" TargetType="Menu">
        <Setter Property="ItemContainerStyle" Value="{StaticResource PageItems}"/>
        <Setter Property="Background" Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MenuBackNotFocused}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel VerticalAlignment="Center" Orientation="{Binding SelectedMenu, Converter={StaticResource ResourceKey=MenuModeConverter}}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Шаблон окна-->
    <Style TargetType="local:RestourantWindowTemplate">
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="MinWidth" Value="800"/>
        <Setter Property="MinHeight" Value="450"/>

        <Setter Property="WindowState" Value="{Binding WindowStateM, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="ResizeMode" Value="{Binding ResMode, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Left" Value="{Binding Lft, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
        <Setter Property="Top" Value="{Binding Tp, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
        <Setter Property="Width" Value="{Binding Width, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
        <Setter Property="Height" Value="{Binding Height, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MenuBackNotFocused}}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <DockPanel x:Name="BackBorder" Grid.Row="0" Background="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MenuBackNotFocused}}">
                                <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" RenderOptions.EdgeMode="Aliased">
                                    <Button Style="{StaticResource ManageButton}" Command="{Binding MinWindowCommand}">
                                        <Canvas  Width="14" Height="18">
                                            <Polyline Points="2,15 12,15" Stroke="White" StrokeThickness="1"/>
                                        </Canvas>
                                    </Button>
                                    <Button Style="{StaticResource ManageButton}" Command="{Binding MaxWindowCommand}" >
                                        <Canvas Width="18" Height="18">
                                            <Rectangle Panel.ZIndex="1" Width="12" Height="12" Stroke="White" Canvas.Bottom="2" Canvas.Left="2"/>
                                            <Line X1="6" Y1="4" X2="6" Y2="2" Stroke="White" StrokeThickness="1" Visibility="{Binding RealMode, Converter={StaticResource ResourceKey=ButtonVisConverter}}"/>
                                            <Line X1="5.5" Y1="2" X2="16" Y2="2" Stroke="White" StrokeThickness="1" Visibility="{Binding RealMode, Converter={StaticResource ResourceKey=ButtonVisConverter}}"/>
                                            <Line X1="16" Y1="2" X2="16" Y2="14" Stroke="White" StrokeThickness="1" Visibility="{Binding RealMode, Converter={StaticResource ResourceKey=ButtonVisConverter}}"/>
                                            <Line X1="16" Y1="14" X2="14" Y2="14" Stroke="White" StrokeThickness="1" Visibility="{Binding RealMode, Converter={StaticResource ResourceKey=ButtonVisConverter}}"/>
                                        </Canvas>
                                    </Button>
                                    <Button Style="{StaticResource ManageButton}" Command="{Binding CloseWindowCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}">
                                        <Canvas Width="18" Height="18">
                                            <Polyline Stroke="Red" Points="3,3, 15,15"/>
                                            <Polyline Stroke="Red" Points="15,3, 3,15"/>
                                        </Canvas>
                                    </Button>
                                </StackPanel>

                                <DockPanel>
                                    <DockPanel.Style>
                                        <Style TargetType="{x:Type DockPanel}">
                                            <EventSetter Event="MouseLeftButtonDown" Handler="DragMove_Move"/>
                                        </Style>
                                    </DockPanel.Style>
                                    <Image  Source="{TemplateBinding Icon}" DockPanel.Dock="Left"
                                            Width="18" Height="18" Margin="10,0,0,0"/>
                                    <TextBlock Text="{TemplateBinding Title}" Margin="10,0,0,0" Foreground="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MainFontColor}}"
                                            TextAlignment="Left" VerticalAlignment="Center"/>
                                </DockPanel>
                            </DockPanel>

                            <!--Меню + контент-->
                            <DockPanel Grid.Row="1">
                                <Menu DockPanel.Dock="{Binding SelectedMenu}" Visibility="{Binding IsMenuOn, Converter={StaticResource ResourceKey=MenuVisConverter}}"
                                    ItemsSource="{Binding TabsList}" Style="{StaticResource ResourceKey=MainMenu}" Panel.ZIndex="1"/>
                                <Border CornerRadius="5" BorderThickness="1" BorderBrush="{StaticResource {ComponentResourceKey TypeInTargetAssembly=lc:Generic,ResourceId=MenuBackNotFocused}}">
                                    <Border.Background>
                                        <ImageBrush ImageSource="/Resources/Images/Background.png" Stretch="Fill"/>
                                    </Border.Background>
                                    <ContentControl Content="{Binding SelectedPage}"/>
                                </Border>
                            </DockPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter Property="WindowChrome.WindowChrome">
                                <Setter.Value>
                                    <WindowChrome NonClientFrameEdges="None" CornerRadius="0" ResizeBorderThickness="0" CaptionHeight="0"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanResize">
                            <Setter Property="WindowChrome.WindowChrome">
                                <Setter.Value>
                                    <WindowChrome NonClientFrameEdges="None" CornerRadius="0" ResizeBorderThickness="2" CaptionHeight="0"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>