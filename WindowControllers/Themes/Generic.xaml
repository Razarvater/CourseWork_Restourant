<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:WindowControllers"
                    x:Class="WindowControllers.Themes.Generic"
                    xmlns:lc="clr-namespace:WindowControllers.Themes">

    <!--TODO: рефакторинг названий цветов-->
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuBack}">#FF404040</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuBack_2}">#FF353535</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MenuBack_0}">#FF454545</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=BackGroundColor}">#FF303030</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MainFontColor}">#FFCCCCCC</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MainFontColor_1}">#FFABABAB</SolidColorBrush>
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=MainFontColor_2}">#FF858585</SolidColorBrush>

    <Color x:Key="MenuBack_Color">#FF404040</Color>
    <Color x:Key="MenuBack_2Color">#FF353535</Color>
    <Color x:Key="MenuBack_0Color">#FF454545</Color>
    <Color x:Key="BackGroundColor">#FF303030</Color>
    <Color x:Key="MainFontColor">#FFCCCCCC</Color>

    <!--Конвертеры-->
    <local:ButtonVisConverter x:Key="ButtonVisConverter"/>
    <local:MenuVisConverter x:Key="MenuVisConverter"/>
    <local:MenuModeConverter x:Key="MenuModeConverter"/>
    <local:MenuColorConverter x:Key="MenuColorConverter"/>
    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

    <!--Тёмный ListBox-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=ListBlack}" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!--Верхняя кнопка ScroolBar-->
    <Style x:Key="ScrollBarLineButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="#FF565656" Points="2,15 16,15 9,2"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Нижняя кнопка ScroolBar-->
    <Style x:Key="ScrollBarLineButtonBottomStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="#FF565656" Points="2,3 16,3 9,16"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Прокрутка ScrollBar-->
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border BorderBrush="Yellow"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Прокрутка ScroolBar-->
    <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle Fill="#FF666666" Margin="2,0,1,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Стиль вертикального ScroolBar-->
    <Style x:Key="ScroolBarBlackVertical" TargetType="{x:Type ScrollBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition MaxHeight="18"/>
                        </Grid.RowDefinitions>

                        <RepeatButton Grid.Row="0" Height="18" Style="{StaticResource ScrollBarLineButtonStyle}" Command="ScrollBar.LineUpCommand" />
                        <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="True">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbStyle}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                            </Track.IncreaseRepeatButton>
                        </Track>
                        <RepeatButton Grid.Row="3" Height="18" Style="{StaticResource ScrollBarLineButtonBottomStyle}"
                                      Command="ScrollBar.LineDownCommand"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Верхняя кнопка ScroolBar-->
    <Style x:Key="ScrollBarLineButtonStyleHor" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="#FF565656" Points="2,8 16,16 16,2"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Нижняя кнопка ScroolBar-->
    <Style x:Key="ScrollBarLineButtonBottomStyleHor" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Canvas Height="18">
                        <Polygon Fill="#FF565656" Points="2,16 2,2 16,9"/>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Прокрутка ScroolBar-->
    <Style x:Key="ScrollBarThumbStyleHor" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle Fill="#FF666666" Margin="0,2,0,1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScroolBarBlackHorizontal" TargetType="{x:Type ScrollBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MaxWidth="18"/>
                            <ColumnDefinition Width="0.0001*"/>
                            <ColumnDefinition MaxWidth="18"/>
                        </Grid.ColumnDefinitions>

                        <RepeatButton Grid.Column="0" Width="18" Style="{StaticResource ScrollBarLineButtonStyleHor}"
                                      Command="ScrollBar.LineLeftCommand"/>
                        <Track Name="PART_Track" Grid.Column="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageLeftCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbStyleHor}"/>
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="ScrollBar.PageRightCommand" Style="{StaticResource ScrollBarPageButtonStyle}"/>
                            </Track.IncreaseRepeatButton>
                        </Track>
                        <RepeatButton Grid.Column="2" Width="18" Style="{StaticResource ScrollBarLineButtonBottomStyleHor}"
                                      Command="ScrollBar.LineRightCommand"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Шаблон для ScrollWiewer-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=ScrollViewerBlack}" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Column="0" BorderThickness="0">
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}"/>
                        </Border>
                        <ScrollBar x:Name="PART_VerticalScrollBar" Style="{StaticResource ScroolBarBlackVertical}" Grid.Column="1" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}"
                             ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Style="{StaticResource ScroolBarBlackHorizontal}" Orientation="Horizontal" Grid.Row="1" Grid.ColumnSpan="1" Value="{TemplateBinding HorizontalOffset}"
                            Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Тёмный TextBox-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=TextBoxBlack}" TargetType="{x:Type TextBox}">
        <!--Триггер - При наличии ошибки будет появляться tooltip с текстом ошибки(определённым во ViewModel)-->
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="BorderBrush" Value="#55FF0000"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Duration="0:0:1" 
                                                        From="#55FF0000" To="#FFFF0000" AutoReverse="True" RepeatBehavior="Forever"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Background" Value="#FF969696"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="#FFBBBBBB"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="False">
                            <Setter Property="Background" Value="#FF969696"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border x:Name="border" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGrid Без признаков DataGrid-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=DataGridBlack}" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SelectionUnit" Value="Cell" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeColumns" Value="False" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="RowHeaderWidth" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="RowBackground" Value="Transparent"/>
        <Setter Property="HorizontalGridLinesBrush" Value="Transparent"/>
        <Setter Property="VerticalGridLinesBrush" Value="Transparent"/>
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="Foreground" Value="{StaticResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MainFontColor}}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridCell}">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
    </Style>

    <!--Тёмная Button-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=BlackButton}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Back" Background="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MainFontColor_1}}" CornerRadius="5" BorderThickness="0.1">
                            <Label x:Name="txt" VerticalAlignment="Center"  HorizontalAlignment="Center"
                               FontWeight="Bold" FontSize="11" Foreground="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack}}" 
                               Content="{TemplateBinding Content}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack_2}}"/>
                            <Setter TargetName="txt" Property="Foreground" Value="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MainFontColor_2}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="Back" Property="Background" Value="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack}}"/>
                            <Setter TargetName="txt" Property="Foreground" Value="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MainFontColor_1}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Переопределение шаблона GroupBox без "Внешних" границ-->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=GroupBoxBlack}" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderThickness" Value="3"/>
        <Setter Property="BorderBrush" Value="#FF565656"/>
        <Setter Property="Foreground" Value="#FFAAAAAA"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border BorderBrush="Transparent" BorderThickness="0" Grid.ColumnSpan="4" CornerRadius="4" Grid.Row="1" Grid.RowSpan="3">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3"/>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Кнопки справа сверху(Менеджмент окна)-->
    <Style x:Key="ManageButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="10,5,10,5"/>
        <Setter Property="Width" Value="35"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Back" Padding="5" Background="Transparent" CornerRadius="0" BorderThickness="0">
                            <ContentPresenter x:Name="txt" VerticalAlignment="Center" 
                                HorizontalAlignment="Center" Content="{TemplateBinding Content}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="{DynamicResource ResourceKey={ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack_2}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="Back" Property="Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Back" Property="Background" Value="Transparent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(Button.Width)" To="40" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(Button.Width)" To="35" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Стиль для элементов меню-->
    <Style x:Key="PageItems" TargetType="MenuItem">
        <Setter Property="Header" Value="{Binding Name}"/>
        <Setter Property="ItemsSource" Value="{Binding Pages}"/>
        <Setter Property="Command" Value="{Binding Navigate}"/>
        <Setter Property="CommandParameter" Value="{Binding PageContent}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Background="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack_2}}" 
                            Padding="5" BorderThickness="0.8,0,0.8,0.8" BorderBrush="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack_0}}">
                        <Grid>
                            <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
                            <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                                <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" BorderThickness="2" BorderBrush="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack}}"
                                        Background="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack_2}}">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </Border>
                            </Popup>
                        </Grid>
                        <!--Триггер для выделения выбранного элемента-->
                        <Border.Triggers>
                            <EventTrigger RoutedEvent="MouseEnter">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.2"
                                            To="{StaticResource MenuBack_0Color}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="MouseLeave">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" Duration="0:0:0.2"
                                            To="{StaticResource MenuBack_2Color}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Border.Triggers>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MainFontColor}}"/>
    </Style>

    <!--Общий стиль меню-->
    <Style x:Key="MainMenu" TargetType="Menu">
        <Setter Property="ItemContainerStyle" Value="{StaticResource PageItems}"/>
        <Setter Property="Background" Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack_2}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel Orientation="{Binding SelectedMenu, Converter={StaticResource ResourceKey=MenuModeConverter}}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Шаблон окна-->
    <Style TargetType="local:RestourantWindowTemplate">
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="MinWidth" Value="800"/>
        <Setter Property="MinHeight" Value="450"/>

        <Setter Property="WindowState" Value="{Binding WindowStateM, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="ResizeMode" Value="{Binding ResMode, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Left" Value="{Binding Lft, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
        <Setter Property="Top" Value="{Binding Tp, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
        <Setter Property="Width" Value="{Binding Width, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
        <Setter Property="Height" Value="{Binding Height, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic}, ResourceId=BackGroundColor}}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <DockPanel x:Name="BackBorder" Grid.Row="0" Background="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MenuBack}}">
                                <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" RenderOptions.EdgeMode="Aliased">
                                    <Button Style="{StaticResource ManageButton}" Command="{Binding MinWindowCommand}">
                                        <Canvas  Width="14" Height="18">
                                            <Polyline Points="2,15 12,15" Stroke="White" StrokeThickness="1"/>
                                        </Canvas>
                                    </Button>
                                    <Button Style="{StaticResource ManageButton}" Command="{Binding MaxWindowCommand}" >
                                        <Canvas Width="18" Height="18">
                                            <Rectangle Panel.ZIndex="1" Width="12" Height="12" Stroke="White" Canvas.Bottom="2" Canvas.Left="2"/>
                                            <Line X1="6" Y1="4" X2="6" Y2="2" Stroke="White" StrokeThickness="1" Visibility="{Binding RealMode, Converter={StaticResource ResourceKey=ButtonVisConverter}}"/>
                                            <Line X1="5.5" Y1="2" X2="16" Y2="2" Stroke="White" StrokeThickness="1" Visibility="{Binding RealMode, Converter={StaticResource ResourceKey=ButtonVisConverter}}"/>
                                            <Line X1="16" Y1="2" X2="16" Y2="14" Stroke="White" StrokeThickness="1" Visibility="{Binding RealMode, Converter={StaticResource ResourceKey=ButtonVisConverter}}"/>
                                            <Line X1="16" Y1="14" X2="14" Y2="14" Stroke="White" StrokeThickness="1" Visibility="{Binding RealMode, Converter={StaticResource ResourceKey=ButtonVisConverter}}"/>
                                        </Canvas>
                                    </Button>
                                    <Button Style="{StaticResource ManageButton}" Command="{Binding CloseWindowCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window}}">
                                        <Canvas Width="18" Height="18">
                                            <Polyline Stroke="Red" Points="3,3, 15,15"/>
                                            <Polyline Stroke="Red" Points="15,3, 3,15"/>
                                        </Canvas>
                                    </Button>
                                </StackPanel>

                                <DockPanel>
                                    <DockPanel.Style>
                                        <Style TargetType="{x:Type DockPanel}">
                                            <EventSetter Event="MouseLeftButtonDown" Handler="DragMove_Move"/>
                                        </Style>
                                    </DockPanel.Style>
                                    <Image  Source="{TemplateBinding Icon}" DockPanel.Dock="Left"
                                            Width="18" Height="18" Margin="10,0,0,0"/>
                                    <TextBlock Text="{TemplateBinding Title}" Margin="10,0,0,0" Foreground="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type lc:Generic},ResourceId=MainFontColor}}"
                                            TextAlignment="Left" VerticalAlignment="Center"/>
                                </DockPanel>
                            </DockPanel>
                            <!--Меню + контент-->
                            <DockPanel Grid.Row="1">
                                <Menu DockPanel.Dock="{Binding SelectedMenu}" Visibility="{Binding IsMenuOn, Converter={StaticResource ResourceKey=MenuVisConverter}}"
                                      ItemsSource="{Binding TabsList}" Style="{StaticResource ResourceKey=MainMenu}"/>
                                <ContentControl Grid.Row="1" Content="{Binding SelectedPage}"/>
                            </DockPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ResizeMode" Value="NoResize">
                            <Setter Property="WindowChrome.WindowChrome">
                                <Setter.Value>
                                    <WindowChrome NonClientFrameEdges="None" CornerRadius="0" ResizeBorderThickness="0" CaptionHeight="0"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ResizeMode" Value="CanResize">
                            <Setter Property="WindowChrome.WindowChrome">
                                <Setter.Value>
                                    <WindowChrome NonClientFrameEdges="None" CornerRadius="0" ResizeBorderThickness="2" CaptionHeight="0"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>